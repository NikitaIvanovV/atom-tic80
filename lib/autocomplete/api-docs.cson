tic:
  type: 'other'
  displayText:
    lua: 'function TIC()'
    js: 'function TIC()'
    moon: 'export TIC=->'
    wren: 'TIC()'
    squirrel: 'function TIC()'
  description: "TIC() is the \"main\" function and must be present in every program. It takes no parameters and is called sixty times per second (60fps)."
  snippet:
    lua:
      """
      function TIC()
        ${1:-- Put your stuff here}
      end
      """
    js:
      """
      function TIC() {
        ${1:// Put your stuff here}
      }
      """
    moon:
      """
      export TIC=->
      	${1:-- Put your stuff here}
      """
    wren:
      """
      TIC(){
    		${1:// Put your stuff here}
    	}
      """
    squirrel:
      """
      function TIC()
      {
        ${1:// Put your stuff here}
      }
      """

scn:
  type: 'other'
  displayText:
    lua: 'function SCN()'
    js: 'function SCN()'
    moon: 'export SCN=->'
    wren: 'SCN()'
    squirrel: 'function SCN()'
  description: "SCN() allows you to execute code between the drawing of each scan line, for example, to manipulate the palette."
  snippet:
    lua:
      """
      function SCN(line)
        ${1:-- Put your stuff here}
      end
      """
    js:
      """
      function SCN(line) {
        ${1:// Put your stuff here}
      }
      """
    moon:
      """
      export SCN=(line)->
      	${1:-- Put your stuff here}
      """
    wren:
      """
      SCN(line){
    		${1:// Put your stuff here}
    	}
      """
    squirrel:
      """
      function SCN(line)
      {
        ${1:// Put your stuff here}
      }
      """

ovr:
  type: 'other'
  displayText:
    lua: 'function OVR()'
    js: 'function OVR()'
    moon: 'export OVR=->'
    wren: 'OVR()'
    squirrel: 'function OVR()'
  description: "OVR() is called on every frame. It draws on a separate layer and can be used together with SCN() to create separate background or foreground layers and other visual effects."
  snippet:
    lua:
      """
      function OVR()
        ${1:-- Put your stuff here}
      end
      """
    js:
      """
      function OVR() {
        ${1:// Put your stuff here}
      }
      """
    moon:
      """
      export OVR=->
      	${1:-- Put your stuff here}
      """
    wren:
      """
      OVR(){
    		${1:// Put your stuff here}
    	}
      """
    squirrel:
      """
      function OVR()
      {
        ${1:// Put your stuff here}
      }
      """
  version: '0.60.0'

btn:
  description: "Allows you to read the status of one of the buttons attached to TIC."
  args: ['id']
  returns: 'Boolean'

btnp:
  description: "Allows you to read the status of one of the buttons attached to TIC. It returns true only if the key has been pressed since the last frame."
  args: ['id', '[hold]', '[period]']
  returns: 'Boolean'

clip:
  description:
    """
    Limits drawing to a clipping region or 'viewport' defined by x,y,w,h. Things drawn outside of this area will not be visible.

    Calling clip() with no parameters will reset the drawing area to the entire screen.
    """
  args: ['x', 'y', 'w', 'h']

cls:
  description: "Clears the entire screen using the color argument. If no parameter is passed, index 0 of the palette is used."
  args: ['color']

circ:
  description: "Draws a filled circle of the desired radius and color with its center at x, y."
  args: ['x', 'y', 'radius', 'color']

circb:
  description: "Draws the circumference of a circle with its center at x, y using the radius and color requested."
  args: ['x', 'y', 'radius', 'color']

exit:
  description: "Interrupts program execution and returns to the console when the TIC function ends."

fget:
  description: "Returns true if the specified flag of the sprite is set."
  args: ['sprite', 'flag']
  returns: 'Boolean'
  version: '0.80.0'

font:
  description: "Draw text to the screen using sprites from the foreground sprite-sheet for the font."
  args: ['text', 'x', 'y', 'colorKey', 'charWidth', 'charHeight', 'fixed', 'scale']
  returns: 'width'

fset:
  description: "Sets the flag to the sprite."
  args: ['index', 'flag', 'bool']
  version: '0.80.0'

key:
  description: "The function returns true if the key denoted by keycode is pressed."
  args: ['code']
  version: '0.60.3'

keyp:
  description: "This function returns true if the given key is pressed but wasn't pressed in the previous frame."
  args: ['id', '[hold]', '[period]']
  version: '0.60.3'

line:
  description: "Draws a straight line from point (x0, y0) to point (x1, y1) of the specified color."
  args: ['x0', 'y0', 'x1', 'y1', 'color']

map:
  description: "Draw the desired area of the map to the specified screen position."
  args: ['x', 'y', 'width', 'height', 'screenX', 'screenY', 'color', 'scale', 'remap']

memcpy:
  description: "Allows you to copy a continuous block of TIC's 64k RAM from one address to another."
  args: ['to', 'from', 'length']

memset:
  description: "This function allows you to set a continuous block of any part of TIC's RAM to the same value."
  args: ['address', 'value', 'length']

mget:
  description: "Returns the sprite ID at the given x and y map coordinate."
  args: ['x', 'y']
  returns: 'Sprite ID'

mouse:
  description: "Returns the mouse coordinates and a boolean value for the state of each mouse button, with true indicating that a button is pressed."
  returns:
    lua: 'List'
    js: 'Array'
    moon: 'List'
    wren: 'List'
    squirrel: 'Array'

mset:
  description: "Changes the sprite at the specified map coordinates."
  args: ['x', 'y', 'sprite']

music:
  description: "Starts playing a track created in the Music Editor. Call without arguments to stop the music."
  args: ['track', 'frame', 'row', 'loop', 'sustain']

peek:
  description: "Returns a byte stored in TIC's RAM."
  args: ['address']
  returns: 'Integer'

peek4:
  description: "Returns a 4-bit value stored in TIC's RAM."
  args: ['address4']
  returns: 'Integer'

pix:
  description: "Reads or writes pixel color values."
  args: ['x', 'y', '[color]']
  returns: 'color'

pmem:
  description: "Saves and retrieves data in one of the 256 individual 32-bit slots available in the cartridge's persistent memory."
  args: ['index', '[value]']
  returns: 'value'

poke:
  description: "Writes a single byte to any address in TIC's RAM."
  args: ['address', 'value']

poke4:
  description: "Writes a 4-bit value to any address in TIC's RAM."
  args: ['address4', 'value']

print:
  description: "Print text to the screen using the font defined in config."
  args: ['string', 'x', 'y']
  returns: 'width'

rect:
  description: "Draws a filled rectangle of the desired size and color at the specified position."
  args: ['x', 'y', 'width', 'height', 'color']

rectb:
  description: "Draws a one pixel thick rectangle border of the desired size and color at the specified position."
  args: ['x', 'y', 'width', 'height', 'color']

reset:
  description: "Resets the cartridge."
  version: '0.60.0'

sfx:
  description: "Plays the sound with ID created in the SFX Editor."
  args: ['id']

spr:
  description: "Draws the sprite on the screen."
  args: ['id', 'x', 'y']

sync:
  description: "Switches between banks or saves current assets to a bank."
  args: ['mask', 'bank', 'toCart']
  version: '0.60.0'

time:
  description: "Returns the number of milliseconds elapsed since the cartridge began execution."
  returns: 'Integer'

tstamp:
  description: "Returns the number of seconds elapsed since January 1st, 1970."
  returns: 'Integer'
  version: '0.80.0'

trace:
  description: "Prints the message to the console."
  args: ['message']

tri:
  description: "Draws a triangle filled with color, using the supplied vertices."
  args: ['x1', 'y1', 'x2', 'y2', 'x3', 'y3', 'color']

textri:
  description: "Renders a triangle filled with texture from sprite or map RAM."
  args: ['x1', 'y1', 'x2', 'y2', 'x3', 'y3', 'u1', 'v1', 'u2', 'v2', 'u3', 'v3']
  version: '0.46.0'
